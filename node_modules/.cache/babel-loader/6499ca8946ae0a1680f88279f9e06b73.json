{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithRedirect, createUserWithEmailAndPassword, signInWithPopup, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB5tdemqOb_gBO4W2JsAvRf8ieg_77jCBE\",\n  authDomain: \"moda-database-f714e.firebaseapp.com\",\n  projectId: \"moda-database-f714e\",\n  storageBucket: \"moda-database-f714e.appspot.com\",\n  messagingSenderId: \"397614140685\",\n  appId: \"1:397614140685:web:18b823f77a3e1c019cf444\",\n  measurementId: \"G-25K0B784F9\"\n}; // Initialize Firebase\n\nconst firebaseapp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInwithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListner = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithRedirect","createUserWithEmailAndPassword","signInWithPopup","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseapp","googleProvider","setCustomParameters","prompt","auth","signInwithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListner","callback"],"sources":["/Users/marwah/Desktop/moda-main/src/Utils/firebase/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n\nimport {\n    getAuth,\n    GoogleAuthProvider,\n    signInWithRedirect,\n    createUserWithEmailAndPassword,\n    signInWithPopup,\n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged\n} from'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB5tdemqOb_gBO4W2JsAvRf8ieg_77jCBE\",\n  authDomain: \"moda-database-f714e.firebaseapp.com\",\n  projectId: \"moda-database-f714e\",\n  storageBucket: \"moda-database-f714e.appspot.com\",\n  messagingSenderId: \"397614140685\",\n  appId: \"1:397614140685:web:18b823f77a3e1c019cf444\",\n  measurementId: \"G-25K0B784F9\"\n};\n\n// Initialize Firebase\nconst firebaseapp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account',\n});\nexport const auth = getAuth();\nexport const signInwithGooglePopup=() => signInWithPopup(auth,googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n  export const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser =async ()=> await signOut(auth);\n\nexport const onAuthStateChangedListner =(callback)=> onAuthStateChanged(auth,callback);"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AAEA,SACIC,OADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,8BAJJ,EAKIC,eALJ,EAMIC,0BANJ,EAOIC,OAPJ,EAQIC,kBARJ,QASM,eATN;AAUA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CACA;AACA;AAEA;AACA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,qCAFS;EAGrBC,SAAS,EAAE,qBAHU;EAIrBC,aAAa,EAAE,iCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE,2CANc;EAOrBC,aAAa,EAAE;AAPM,CAAvB,C,CAUA;;AACA,MAAMC,WAAW,GAAGrB,aAAa,CAACa,cAAD,CAAjC;AAEA,MAAMS,cAAc,GAAG,IAAIpB,kBAAJ,EAAvB;AAEAoB,cAAc,CAACC,mBAAf,CAAmC;EACjCC,MAAM,EAAE;AADyB,CAAnC;AAGA,OAAO,MAAMC,IAAI,GAAGxB,OAAO,EAApB;AACP,OAAO,MAAMyB,qBAAqB,GAAC,MAAMrB,eAAe,CAACoB,IAAD,EAAMH,cAAN,CAAjD;AACP,OAAO,MAAMK,wBAAwB,GAAG,MACtCxB,kBAAkB,CAACsB,IAAD,EAAOH,cAAP,CADb;AAEL,OAAO,MAAMM,EAAE,GAAGnB,YAAY,EAAvB;AAET,OAAO,MAAMoB,0BAA0B,GAAG,gBACxCC,QADwC,EAGrC;EAAA,IADHC,qBACG,uEADqB,EACrB;EACH,IAAI,CAACD,QAAL,EAAe;EAEf,MAAME,UAAU,GAAGtB,GAAG,CAACkB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAtB;EAEA,MAAMC,YAAY,GAAG,MAAMvB,MAAM,CAACqB,UAAD,CAAjC;;EAEA,IAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA4B;IAC1B,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBP,QAA/B;IACA,MAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACF,MAAM3B,MAAM,CAACoB,UAAD,EAAa;QACvBI,WADuB;QAEvBC,KAFuB;QAGvBC,SAHuB;QAIvB,GAAGP;MAJoB,CAAb,CAAZ;IAMD,CAPD,CAOE,OAAOS,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAK,CAACG,OAA7C;IACD;EACF;;EAED,OAAOX,UAAP;AACD,CA3BM;AA6BP,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAMzC,8BAA8B,CAACqB,IAAD,EAAOY,KAAP,EAAcQ,QAAd,CAA3C;AACD,CAJM;AAMP,OAAO,MAAMC,kCAAkC,GAAG,OAAOT,KAAP,EAAcQ,QAAd,KAA2B;EAC3E,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EAEzB,OAAO,MAAMvC,0BAA0B,CAACmB,IAAD,EAAOY,KAAP,EAAcQ,QAAd,CAAvC;AACD,CAJM;AAKP,OAAO,MAAME,WAAW,GAAE,YAAW,MAAMxC,OAAO,CAACkB,IAAD,CAA3C;AAEP,OAAO,MAAMuB,yBAAyB,GAAGC,QAAD,IAAazC,kBAAkB,CAACiB,IAAD,EAAMwB,QAAN,CAAhE"},"metadata":{},"sourceType":"module"}